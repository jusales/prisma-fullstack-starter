# source: https://eu1.prisma.sh/juliana-sales/app/dev
# timestamp: Fri Jul 20 2018 00:30:12 GMT+0100 (Western European Summer Time)

type AggregateBusiness {
  count: Int!
}

type AggregateCuisines {
  count: Int!
}

type AggregateTags {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Business implements Node {
  id: ID!
  zomatoID: String
  name: String!
  url: String
  address: String
  locality: String
  city: String
  latitude: String
  longitude: String
  price: PriceRange
  hours: String
  cuisine(where: CuisinesWhereInput): Cuisines
  tags(where: TagsWhereInput): Tags
  type: BusinessType
  comment: String
}

"""A connection to a list of items."""
type BusinessConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BusinessEdge]!
  aggregate: AggregateBusiness!
}

input BusinessCreateInput {
  zomatoID: String
  name: String!
  url: String
  address: String
  locality: String
  city: String
  latitude: String
  longitude: String
  price: PriceRange
  hours: String
  type: BusinessType
  comment: String
  cuisine: CuisinesCreateOneInput
  tags: TagsCreateOneInput
}

"""An edge in a connection."""
type BusinessEdge {
  """The item at the end of the edge."""
  node: Business!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BusinessOrderByInput {
  id_ASC
  id_DESC
  zomatoID_ASC
  zomatoID_DESC
  name_ASC
  name_DESC
  url_ASC
  url_DESC
  address_ASC
  address_DESC
  locality_ASC
  locality_DESC
  city_ASC
  city_DESC
  latitude_ASC
  latitude_DESC
  longitude_ASC
  longitude_DESC
  price_ASC
  price_DESC
  hours_ASC
  hours_DESC
  type_ASC
  type_DESC
  comment_ASC
  comment_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type BusinessPreviousValues {
  id: ID!
  zomatoID: String
  name: String!
  url: String
  address: String
  locality: String
  city: String
  latitude: String
  longitude: String
  price: PriceRange
  hours: String
  type: BusinessType
  comment: String
}

type BusinessSubscriptionPayload {
  mutation: MutationType!
  node: Business
  updatedFields: [String!]
  previousValues: BusinessPreviousValues
}

input BusinessSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BusinessSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BusinessSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BusinessSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BusinessWhereInput
}

enum BusinessType {
  BAR
  RESTAURANT
}

input BusinessUpdateInput {
  zomatoID: String
  name: String
  url: String
  address: String
  locality: String
  city: String
  latitude: String
  longitude: String
  price: PriceRange
  hours: String
  type: BusinessType
  comment: String
  cuisine: CuisinesUpdateOneInput
  tags: TagsUpdateOneInput
}

input BusinessWhereInput {
  """Logical AND on all given filters."""
  AND: [BusinessWhereInput!]

  """Logical OR on all given filters."""
  OR: [BusinessWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BusinessWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  zomatoID: String

  """All values that are not equal to given value."""
  zomatoID_not: String

  """All values that are contained in given list."""
  zomatoID_in: [String!]

  """All values that are not contained in given list."""
  zomatoID_not_in: [String!]

  """All values less than the given value."""
  zomatoID_lt: String

  """All values less than or equal the given value."""
  zomatoID_lte: String

  """All values greater than the given value."""
  zomatoID_gt: String

  """All values greater than or equal the given value."""
  zomatoID_gte: String

  """All values containing the given string."""
  zomatoID_contains: String

  """All values not containing the given string."""
  zomatoID_not_contains: String

  """All values starting with the given string."""
  zomatoID_starts_with: String

  """All values not starting with the given string."""
  zomatoID_not_starts_with: String

  """All values ending with the given string."""
  zomatoID_ends_with: String

  """All values not ending with the given string."""
  zomatoID_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  locality: String

  """All values that are not equal to given value."""
  locality_not: String

  """All values that are contained in given list."""
  locality_in: [String!]

  """All values that are not contained in given list."""
  locality_not_in: [String!]

  """All values less than the given value."""
  locality_lt: String

  """All values less than or equal the given value."""
  locality_lte: String

  """All values greater than the given value."""
  locality_gt: String

  """All values greater than or equal the given value."""
  locality_gte: String

  """All values containing the given string."""
  locality_contains: String

  """All values not containing the given string."""
  locality_not_contains: String

  """All values starting with the given string."""
  locality_starts_with: String

  """All values not starting with the given string."""
  locality_not_starts_with: String

  """All values ending with the given string."""
  locality_ends_with: String

  """All values not ending with the given string."""
  locality_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  latitude: String

  """All values that are not equal to given value."""
  latitude_not: String

  """All values that are contained in given list."""
  latitude_in: [String!]

  """All values that are not contained in given list."""
  latitude_not_in: [String!]

  """All values less than the given value."""
  latitude_lt: String

  """All values less than or equal the given value."""
  latitude_lte: String

  """All values greater than the given value."""
  latitude_gt: String

  """All values greater than or equal the given value."""
  latitude_gte: String

  """All values containing the given string."""
  latitude_contains: String

  """All values not containing the given string."""
  latitude_not_contains: String

  """All values starting with the given string."""
  latitude_starts_with: String

  """All values not starting with the given string."""
  latitude_not_starts_with: String

  """All values ending with the given string."""
  latitude_ends_with: String

  """All values not ending with the given string."""
  latitude_not_ends_with: String
  longitude: String

  """All values that are not equal to given value."""
  longitude_not: String

  """All values that are contained in given list."""
  longitude_in: [String!]

  """All values that are not contained in given list."""
  longitude_not_in: [String!]

  """All values less than the given value."""
  longitude_lt: String

  """All values less than or equal the given value."""
  longitude_lte: String

  """All values greater than the given value."""
  longitude_gt: String

  """All values greater than or equal the given value."""
  longitude_gte: String

  """All values containing the given string."""
  longitude_contains: String

  """All values not containing the given string."""
  longitude_not_contains: String

  """All values starting with the given string."""
  longitude_starts_with: String

  """All values not starting with the given string."""
  longitude_not_starts_with: String

  """All values ending with the given string."""
  longitude_ends_with: String

  """All values not ending with the given string."""
  longitude_not_ends_with: String
  price: PriceRange

  """All values that are not equal to given value."""
  price_not: PriceRange

  """All values that are contained in given list."""
  price_in: [PriceRange!]

  """All values that are not contained in given list."""
  price_not_in: [PriceRange!]
  hours: String

  """All values that are not equal to given value."""
  hours_not: String

  """All values that are contained in given list."""
  hours_in: [String!]

  """All values that are not contained in given list."""
  hours_not_in: [String!]

  """All values less than the given value."""
  hours_lt: String

  """All values less than or equal the given value."""
  hours_lte: String

  """All values greater than the given value."""
  hours_gt: String

  """All values greater than or equal the given value."""
  hours_gte: String

  """All values containing the given string."""
  hours_contains: String

  """All values not containing the given string."""
  hours_not_contains: String

  """All values starting with the given string."""
  hours_starts_with: String

  """All values not starting with the given string."""
  hours_not_starts_with: String

  """All values ending with the given string."""
  hours_ends_with: String

  """All values not ending with the given string."""
  hours_not_ends_with: String
  type: BusinessType

  """All values that are not equal to given value."""
  type_not: BusinessType

  """All values that are contained in given list."""
  type_in: [BusinessType!]

  """All values that are not contained in given list."""
  type_not_in: [BusinessType!]
  comment: String

  """All values that are not equal to given value."""
  comment_not: String

  """All values that are contained in given list."""
  comment_in: [String!]

  """All values that are not contained in given list."""
  comment_not_in: [String!]

  """All values less than the given value."""
  comment_lt: String

  """All values less than or equal the given value."""
  comment_lte: String

  """All values greater than the given value."""
  comment_gt: String

  """All values greater than or equal the given value."""
  comment_gte: String

  """All values containing the given string."""
  comment_contains: String

  """All values not containing the given string."""
  comment_not_contains: String

  """All values starting with the given string."""
  comment_starts_with: String

  """All values not starting with the given string."""
  comment_not_starts_with: String

  """All values ending with the given string."""
  comment_ends_with: String

  """All values not ending with the given string."""
  comment_not_ends_with: String
  cuisine: CuisinesWhereInput
  tags: TagsWhereInput
}

input BusinessWhereUniqueInput {
  id: ID
}

type Cuisines {
  ITALIAN: Boolean!
  ASIAN: Boolean!
  INDIAN: Boolean!
  MISCELLANEOUS: Boolean!
  LOCAL: Boolean!
  VEGAN: Boolean!
  VEGETARIAN: Boolean!
  MEDITERRANEAN: Boolean!
  MEXICAN: Boolean!
  AMERICAN: Boolean!
}

"""A connection to a list of items."""
type CuisinesConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CuisinesEdge]!
  aggregate: AggregateCuisines!
}

input CuisinesCreateInput {
  ITALIAN: Boolean
  ASIAN: Boolean
  INDIAN: Boolean
  MISCELLANEOUS: Boolean
  LOCAL: Boolean
  VEGAN: Boolean
  VEGETARIAN: Boolean
  MEDITERRANEAN: Boolean
  MEXICAN: Boolean
  AMERICAN: Boolean
}

input CuisinesCreateOneInput {
  create: CuisinesCreateInput
}

"""An edge in a connection."""
type CuisinesEdge {
  """The item at the end of the edge."""
  node: Cuisines!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CuisinesOrderByInput {
  ITALIAN_ASC
  ITALIAN_DESC
  ASIAN_ASC
  ASIAN_DESC
  INDIAN_ASC
  INDIAN_DESC
  MISCELLANEOUS_ASC
  MISCELLANEOUS_DESC
  LOCAL_ASC
  LOCAL_DESC
  VEGAN_ASC
  VEGAN_DESC
  VEGETARIAN_ASC
  VEGETARIAN_DESC
  MEDITERRANEAN_ASC
  MEDITERRANEAN_DESC
  MEXICAN_ASC
  MEXICAN_DESC
  AMERICAN_ASC
  AMERICAN_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CuisinesPreviousValues {
  ITALIAN: Boolean!
  ASIAN: Boolean!
  INDIAN: Boolean!
  MISCELLANEOUS: Boolean!
  LOCAL: Boolean!
  VEGAN: Boolean!
  VEGETARIAN: Boolean!
  MEDITERRANEAN: Boolean!
  MEXICAN: Boolean!
  AMERICAN: Boolean!
}

type CuisinesSubscriptionPayload {
  mutation: MutationType!
  node: Cuisines
  updatedFields: [String!]
  previousValues: CuisinesPreviousValues
}

input CuisinesSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CuisinesSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CuisinesSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CuisinesSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CuisinesWhereInput
}

input CuisinesUpdateDataInput {
  ITALIAN: Boolean
  ASIAN: Boolean
  INDIAN: Boolean
  MISCELLANEOUS: Boolean
  LOCAL: Boolean
  VEGAN: Boolean
  VEGETARIAN: Boolean
  MEDITERRANEAN: Boolean
  MEXICAN: Boolean
  AMERICAN: Boolean
}

input CuisinesUpdateInput {
  ITALIAN: Boolean
  ASIAN: Boolean
  INDIAN: Boolean
  MISCELLANEOUS: Boolean
  LOCAL: Boolean
  VEGAN: Boolean
  VEGETARIAN: Boolean
  MEDITERRANEAN: Boolean
  MEXICAN: Boolean
  AMERICAN: Boolean
}

input CuisinesUpdateOneInput {
  create: CuisinesCreateInput
  disconnect: Boolean
  delete: Boolean
  update: CuisinesUpdateDataInput
  upsert: CuisinesUpsertNestedInput
}

input CuisinesUpsertNestedInput {
  update: CuisinesUpdateDataInput!
  create: CuisinesCreateInput!
}

input CuisinesWhereInput {
  """Logical AND on all given filters."""
  AND: [CuisinesWhereInput!]

  """Logical OR on all given filters."""
  OR: [CuisinesWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CuisinesWhereInput!]
  ITALIAN: Boolean

  """All values that are not equal to given value."""
  ITALIAN_not: Boolean
  ASIAN: Boolean

  """All values that are not equal to given value."""
  ASIAN_not: Boolean
  INDIAN: Boolean

  """All values that are not equal to given value."""
  INDIAN_not: Boolean
  MISCELLANEOUS: Boolean

  """All values that are not equal to given value."""
  MISCELLANEOUS_not: Boolean
  LOCAL: Boolean

  """All values that are not equal to given value."""
  LOCAL_not: Boolean
  VEGAN: Boolean

  """All values that are not equal to given value."""
  VEGAN_not: Boolean
  VEGETARIAN: Boolean

  """All values that are not equal to given value."""
  VEGETARIAN_not: Boolean
  MEDITERRANEAN: Boolean

  """All values that are not equal to given value."""
  MEDITERRANEAN_not: Boolean
  MEXICAN: Boolean

  """All values that are not equal to given value."""
  MEXICAN_not: Boolean
  AMERICAN: Boolean

  """All values that are not equal to given value."""
  AMERICAN_not: Boolean
  _MagicalBackRelation_BusinessToCuisines_every: BusinessWhereInput
  _MagicalBackRelation_BusinessToCuisines_some: BusinessWhereInput
  _MagicalBackRelation_BusinessToCuisines_none: BusinessWhereInput
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createBusiness(data: BusinessCreateInput!): Business!
  createCuisines(data: CuisinesCreateInput!): Cuisines!
  createTags(data: TagsCreateInput!): Tags!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateBusiness(data: BusinessUpdateInput!, where: BusinessWhereUniqueInput!): Business
  deleteUser(where: UserWhereUniqueInput!): User
  deleteBusiness(where: BusinessWhereUniqueInput!): Business
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertBusiness(where: BusinessWhereUniqueInput!, create: BusinessCreateInput!, update: BusinessUpdateInput!): Business!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyBusinesses(data: BusinessUpdateInput!, where: BusinessWhereInput): BatchPayload!
  updateManyCuisineses(data: CuisinesUpdateInput!, where: CuisinesWhereInput): BatchPayload!
  updateManyTagses(data: TagsUpdateInput!, where: TagsWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyBusinesses(where: BusinessWhereInput): BatchPayload!
  deleteManyCuisineses(where: CuisinesWhereInput): BatchPayload!
  deleteManyTagses(where: TagsWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum PriceRange {
  ONE
  TWO
  THREE
  FOUR
  FIVE
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  businesses(where: BusinessWhereInput, orderBy: BusinessOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Business]!
  cuisineses(where: CuisinesWhereInput, orderBy: CuisinesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cuisines]!
  tagses(where: TagsWhereInput, orderBy: TagsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tags]!
  user(where: UserWhereUniqueInput!): User
  business(where: BusinessWhereUniqueInput!): Business
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  businessesConnection(where: BusinessWhereInput, orderBy: BusinessOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BusinessConnection!
  cuisinesesConnection(where: CuisinesWhereInput, orderBy: CuisinesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CuisinesConnection!
  tagsesConnection(where: TagsWhereInput, orderBy: TagsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TagsConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  business(where: BusinessSubscriptionWhereInput): BusinessSubscriptionPayload
  cuisines(where: CuisinesSubscriptionWhereInput): CuisinesSubscriptionPayload
  tags(where: TagsSubscriptionWhereInput): TagsSubscriptionPayload
}

type Tags {
  BRUNCH: Boolean!
  LUNCH: Boolean!
  DINNER: Boolean!
  DRUNCHIES: Boolean!
  CRAFTCOCKTAILS: Boolean!
  INSTAWORTHY: Boolean!
  FANCYAF: Boolean!
  TECHNORAVE: Boolean!
  DANCEALLNIGHT: Boolean!
  LIVEBAND: Boolean!
  ROOFTOP: Boolean!
  GRUNGY: Boolean!
  TREATYOSELF: Boolean!
}

"""A connection to a list of items."""
type TagsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TagsEdge]!
  aggregate: AggregateTags!
}

input TagsCreateInput {
  BRUNCH: Boolean
  LUNCH: Boolean
  DINNER: Boolean
  DRUNCHIES: Boolean
  CRAFTCOCKTAILS: Boolean
  INSTAWORTHY: Boolean
  FANCYAF: Boolean
  TECHNORAVE: Boolean
  DANCEALLNIGHT: Boolean
  LIVEBAND: Boolean
  ROOFTOP: Boolean
  GRUNGY: Boolean
  TREATYOSELF: Boolean
}

input TagsCreateOneInput {
  create: TagsCreateInput
}

"""An edge in a connection."""
type TagsEdge {
  """The item at the end of the edge."""
  node: Tags!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TagsOrderByInput {
  BRUNCH_ASC
  BRUNCH_DESC
  LUNCH_ASC
  LUNCH_DESC
  DINNER_ASC
  DINNER_DESC
  DRUNCHIES_ASC
  DRUNCHIES_DESC
  CRAFTCOCKTAILS_ASC
  CRAFTCOCKTAILS_DESC
  INSTAWORTHY_ASC
  INSTAWORTHY_DESC
  FANCYAF_ASC
  FANCYAF_DESC
  TECHNORAVE_ASC
  TECHNORAVE_DESC
  DANCEALLNIGHT_ASC
  DANCEALLNIGHT_DESC
  LIVEBAND_ASC
  LIVEBAND_DESC
  ROOFTOP_ASC
  ROOFTOP_DESC
  GRUNGY_ASC
  GRUNGY_DESC
  TREATYOSELF_ASC
  TREATYOSELF_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TagsPreviousValues {
  BRUNCH: Boolean!
  LUNCH: Boolean!
  DINNER: Boolean!
  DRUNCHIES: Boolean!
  CRAFTCOCKTAILS: Boolean!
  INSTAWORTHY: Boolean!
  FANCYAF: Boolean!
  TECHNORAVE: Boolean!
  DANCEALLNIGHT: Boolean!
  LIVEBAND: Boolean!
  ROOFTOP: Boolean!
  GRUNGY: Boolean!
  TREATYOSELF: Boolean!
}

type TagsSubscriptionPayload {
  mutation: MutationType!
  node: Tags
  updatedFields: [String!]
  previousValues: TagsPreviousValues
}

input TagsSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TagsSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TagsSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TagsSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TagsWhereInput
}

input TagsUpdateDataInput {
  BRUNCH: Boolean
  LUNCH: Boolean
  DINNER: Boolean
  DRUNCHIES: Boolean
  CRAFTCOCKTAILS: Boolean
  INSTAWORTHY: Boolean
  FANCYAF: Boolean
  TECHNORAVE: Boolean
  DANCEALLNIGHT: Boolean
  LIVEBAND: Boolean
  ROOFTOP: Boolean
  GRUNGY: Boolean
  TREATYOSELF: Boolean
}

input TagsUpdateInput {
  BRUNCH: Boolean
  LUNCH: Boolean
  DINNER: Boolean
  DRUNCHIES: Boolean
  CRAFTCOCKTAILS: Boolean
  INSTAWORTHY: Boolean
  FANCYAF: Boolean
  TECHNORAVE: Boolean
  DANCEALLNIGHT: Boolean
  LIVEBAND: Boolean
  ROOFTOP: Boolean
  GRUNGY: Boolean
  TREATYOSELF: Boolean
}

input TagsUpdateOneInput {
  create: TagsCreateInput
  disconnect: Boolean
  delete: Boolean
  update: TagsUpdateDataInput
  upsert: TagsUpsertNestedInput
}

input TagsUpsertNestedInput {
  update: TagsUpdateDataInput!
  create: TagsCreateInput!
}

input TagsWhereInput {
  """Logical AND on all given filters."""
  AND: [TagsWhereInput!]

  """Logical OR on all given filters."""
  OR: [TagsWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TagsWhereInput!]
  BRUNCH: Boolean

  """All values that are not equal to given value."""
  BRUNCH_not: Boolean
  LUNCH: Boolean

  """All values that are not equal to given value."""
  LUNCH_not: Boolean
  DINNER: Boolean

  """All values that are not equal to given value."""
  DINNER_not: Boolean
  DRUNCHIES: Boolean

  """All values that are not equal to given value."""
  DRUNCHIES_not: Boolean
  CRAFTCOCKTAILS: Boolean

  """All values that are not equal to given value."""
  CRAFTCOCKTAILS_not: Boolean
  INSTAWORTHY: Boolean

  """All values that are not equal to given value."""
  INSTAWORTHY_not: Boolean
  FANCYAF: Boolean

  """All values that are not equal to given value."""
  FANCYAF_not: Boolean
  TECHNORAVE: Boolean

  """All values that are not equal to given value."""
  TECHNORAVE_not: Boolean
  DANCEALLNIGHT: Boolean

  """All values that are not equal to given value."""
  DANCEALLNIGHT_not: Boolean
  LIVEBAND: Boolean

  """All values that are not equal to given value."""
  LIVEBAND_not: Boolean
  ROOFTOP: Boolean

  """All values that are not equal to given value."""
  ROOFTOP_not: Boolean
  GRUNGY: Boolean

  """All values that are not equal to given value."""
  GRUNGY_not: Boolean
  TREATYOSELF: Boolean

  """All values that are not equal to given value."""
  TREATYOSELF_not: Boolean
  _MagicalBackRelation_BusinessToTags_every: BusinessWhereInput
  _MagicalBackRelation_BusinessToTags_some: BusinessWhereInput
  _MagicalBackRelation_BusinessToTags_none: BusinessWhereInput
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
